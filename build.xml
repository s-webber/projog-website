<?xml version="1.0"?>
<project name="projog" default="release-website">
	<property name="version" value="0.3.0" />
	<property name="release-dir" value="projog-${version}"/>
	<property name="javac-target" value="1.8"/>
	<property name="maven-url" value="http://search.maven.org/remotecontent?filepath="/>

	<property name="junit-version" value="4.11"/>
	<property name="junit-jar" value="lib/junit-${junit-version}.jar"/>
	<property name="junit-url" value="${maven-url}junit/junit/${junit-version}/junit-${junit-version}.jar"/>

	<property name="hamcrest-version" value="1.3"/>
	<property name="hamcrest-jar" value="lib/hamcrest-core-${hamcrest-version}.jar"/>
	<property name="hamcrest-url" value="${maven-url}org/hamcrest/hamcrest-core/${hamcrest-version}/hamcrest-core-${hamcrest-version}.jar"/>

	<property name="projog-core-dir" value="../projog"/>
	<property name="projog-core-jar" value="${projog-core-dir}/target/projog-core-0.3.0.jar"/>
	<property name="projog-test-jar" value="lib/projog-test-0.3.0.jar"/>
	<property name="projog-test-url" value="${maven-url}org/projog/projog-test/0.3.0/projog-test-0.3.0.jar"/>

	<tstamp>
		<format property="filename.timestamp" pattern="yyyyMMddHHmm"/>
	</tstamp>

	<target name="check-junit">
		<available file="${junit-jar}" property="junit.exists"/>
	</target>

	<target name="get-dependencies" depends="check-junit" unless="junit.exists">
		<mkdir dir="lib"/>
      <get src="${projog-test-url}" dest="${projog-test-jar}"/>
		<!-- JUnit has a dependency on Hamcrest -->
		<get src="${hamcrest-url}" dest="${hamcrest-jar}"/>
		<get src="${junit-url}" dest="${junit-jar}"/>
   </target>

<!-- CLEAN -->
	<target name="clean" description="deletes build directory">
		<delete dir="build" failonerror="false"/>
	</target>

<!-- COMPILE -->
	<target name="compile.build-utils">
		<mkdir dir="build/classes/build-utils"/>
		<path id="classpath.compile.build-utils">
         <pathelement location="${projog-core-jar}"/>
         <pathelement location="${projog-test-jar}"/>
		</path>
		<javac srcdir="src/main/java" destdir="build/classes/build-utils" debug="on" includeantruntime="false" source="${javac-target}" target="${javac-target}">
			<compilerarg value="-Xlint:-options"/>
			<classpath refid="classpath.compile.build-utils"/>
		</javac>
	</target>

	<target name="compile.build-utils-tests">
		<mkdir dir="build/classes/build-utils-tests"/>
		<path id="classpath.compile.build-utils-tests">
			<pathelement location="${junit-jar}"/>
         <pathelement location="${projog-core-jar}"/>
         <pathelement location="${projog-test-jar}"/>
			<pathelement location="build/classes/build-utils"/>
		</path>
		<javac srcdir="src/test/java" destdir="build/classes/build-utils-tests" debug="on" includeantruntime="false" source="${javac-target}" target="${javac-target}">
			<compilerarg value="-Xlint:-options"/>
			<classpath refid="classpath.compile.build-utils-tests"/>
		</javac>
	</target>

	<target name="compile" depends="get-dependencies,compile.build-utils,compile.build-utils-tests"/>

<!-- UNIT TEST -->
	<target name="unit-test" depends="compile">
		<junit haltonfailure="on" fork="yes" dir=".">
			<formatter type="plain" usefile="false"/>
			<classpath location="${junit-jar}"/>
			<classpath location="${hamcrest-jar}"/>
         <classpath location="${projog-core-jar}"/>
         <classpath location="${projog-test-jar}"/>
			<classpath location="build/classes/build-utils"/>
			<classpath location="build/classes/build-utils-tests"/>
			<batchtest fork="yes" todir=".">
				<fileset dir="src/test/java">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

<!-- GENERATE WEB PAGES -->
	<target name="web" depends="unit-test"
	        description="builds static html pages">
		<copy todir="build/docs">
			<fileset dir="web">
				<include name="*.css"/>
				<include name="favicon.ico"/>
				<include name="robots.txt"/>
			</fileset>
		</copy>
		<copy todir="build/docs/javadoc">
         <fileset dir="${projog-core-dir}/target/apidocs"/>
		</copy>
		<java classname="org.projog.website.HtmlGenerator" failonerror="true" fork="true">
			<arg value="${version}"/>
			<classpath>
				<pathelement location="${projog-core-jar}"/>
            <pathelement location="${projog-test-jar}"/>
				<pathelement location="build/classes/build-utils"/>
				<pathelement location="build/classes/core-tests"/>
			</classpath>
		</java>
	</target>

<!-- RELEASE -->
	<target name="release-application" depends="clean,web"
	        description="builds release candidate as zip containing jar and batch files">
		<copy todir="build/etc">
			<fileset dir="etc"/>
		</copy>
		<copy todir="build/etc" file="${projog-core-dir}/src/test/resources/towers-of-hanoi-example.pl"/>
		<fixcrlf srcdir="build/etc" includes="*.sh" eol="lf" eof="remove" />
		<zip destfile="build/${release-dir}.zip">
			<zipfileset dir="build/etc" prefix="${release-dir}"/>
			<zipfileset dir="${projog-core-dir}" includes="LICENSE" prefix="${release-dir}"/>
			<zipfileset dir="${projog-core-dir}/target" includes="projog-core-*.jar" prefix="${release-dir}/lib"/>
		</zip>
	</target>

	<target name="release-website" depends="release-application"
	        description="builds zip of web content for projog.org">
		<zip destfile="build/projog-web-${filename.timestamp}.zip">
			<fileset dir="build/docs">
				<include name="**"/>
			</fileset>
			<zipfileset dir="build" includes="${release-dir}.zip" prefix="downloads"/>
		</zip>
	</target>
</project>
